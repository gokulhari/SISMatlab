# jemdoc: menu{MENU}{NS.html},addpackage{amssymb},addpackage{mathrsfs},addpackage{amsmath}
# jemdoc: addcss{jemdoc.css}
# jemdoc: addcss{bibover.css}
#include{masterFile_2.jeminc}
#include{mj-complete-bib_3.jeminc}
= Channel flow of a Newtonian fluid
~~~
{}{raw}
<figure>
  <img src="pics/ChannelFlow.svg" alt="3dflow" style="width:50%">
  <p>Fig. 1 Channel flow geometry with base velocity profiles.</p>
</figure>
~~~

The evolution of infinitesimal velocity $[\,u\;\;v\;\;w\,]^T$ and pressure $p$ fluctuations around a base flow $[\,U(y) \;\; 0 \;\; 0\,]^T$ is governed by the linearized Navier-Stokes (NS) equations,
\(
	\begin{equation}
    \begin{array}{rclcrcrcr}
    \partial_{t} u 
    & = &
    (
    (1/Re) \, \Delta 
    \, - \, 
    {\mathrm i} k_x U (y)
    )
    \,
    u
    & - &
    U' (y) \, v
    & - & 
    {\mathrm i} k_x \, p 
    & + &  
    d_u
    \\[.15cm]
    \partial_{t} {v} 
    & = &
    (
    (1/Re) \, \Delta 
    \, - \, 
    {\mathrm i} k_x U (y)
    )
    \,
    v
    & & 
    & - &
    {\mathrm D} \, p  
    & + & 
    d_v
    \\[.15cm]
    \partial_{t} {w} 
    & = &
    (
    (1/Re) \, \Delta 
    \, - \, 
    {\mathrm i} k_x U (y)
    )
    \,
    w
    & &
    & - &
    {\mathrm i} k_z \, p 
    & + &
    d_w
    \\[.15cm]
    0
    & = &
    {\mathrm i} k_x u 
    \; + \; 
    {\mathrm D} \, v 
    \; + \; 
    {\mathrm i} k_z w.
    & & & & & &
    \end{array}
    \label{eq:1}
    \end{equation}
\)
Here, $U' (y) = {\mathrm d} U (y)/ {\mathrm d} y$, ${\mathbf d} = [\,d_u\,\;d_v\,\;d_w\,]^T$ is the body forcing fluctuation vector, $u$, $v$, and $w$ are velocity fluctuations in the streamwise, $x$, wall-normal, $y$, and spanwise, $z$, directions, $k_x$ and $k_z$ are wall-parallel wavenumbers, $Re$ is the Reynolds number, ${\mathrm D}$ is the differential operator in $y$, $\Delta = {\mathrm D}^2 - (k_x^2 + k_z^2) I$ is the Laplacian, and $\mathrm i$ is the imaginary unit. The base velocity is determined by $U(y) = 1 - y^2$ in pressure-driven (Poiseuille) and $U(y) = y$ in shear-driven (Couette) flow. Equivalently, Eq.~$\eqref{eq:1}$ along with the boundary conditions can be represented as,
\(
	\begin{alignat}{3}
  \partial_{t} [\mathcal{E} \, \boldsymbol \phi( \cdot , t)](y) \;&=\; [\mathcal{F}\, \boldsymbol \phi(\cdot , t)](y) \,+\, [\mathcal{B}\,{\mathbf d}(\cdot,t)](y),&&\notag
  \\[0.1cm]
    \boldsymbol \xi (y,t) \;&=\; [\mathcal {C}\,\boldsymbol\phi(\cdot,t)](y),&\label{eq:2}
    \\[0.1cm]
   [\mathcal {L}_{ \pm 1} \, \boldsymbol \phi(\cdot,t)]( \pm 1)  
   \;&=\; 
   0,&\notag
\end{alignat}
	\)	
where $\boldsymbol{\phi} = [\,u \;\; v \;\; w \;\; p\,]^T$, $\boldsymbol{\xi} = [\,u \;\; v \;\; w\,]^T$, and 
\(
	\begin{array}{rclrcl}
	\mathcal{E} 
	& \!\! = \!\! & 
	\left[\begin{array}{cccc}
	I & 0 & 0 & 0\\
	0 & I & 0 & 0\\
	0 & 0 & I & 0\\
	0 & 0 & 0 & 0
	\end{array}
	\right], 
	& 
	\mathcal{F}
	& \!\! = \!\! & 
	\left[\begin{array}{cccc}
 	(1/Re) \Delta - {\mathrm i} k_x U(y) & -U'(y) & 0 & -{\mathrm i} k_x\\
	0 & (1/Re) \Delta - {\mathrm i} k_x U(y) & 0 & - {\mathrm D} \\
	0 & 0 & (1/Re) \Delta - {\mathrm i} k_x U(y) & - {\mathrm i} k_z\\
	{\mathrm i} k_x & {\mathrm D} & {\mathrm i} k_z & 0\\
	\end{array}
	\right],
	\\
	\mathcal{B} 
	& \!\! = \!\! &  
	\left[\begin{array}{ccc}
	I & 0 & 0 \\
	0 & I & 0 \\
	0 & 0 & I \\
	0 & 0 & 0
	\end{array}
	\right], 
	& 
	\mathcal{C}
	& \!\! = \!\! & 
	\left[\begin{array}{cccc}
	I & 0 & 0 & 0 \\
	0 & I & 0 & 0 \\
	0 & 0 & I & 0
	\end{array}
	\right], \qquad \mathcal{L}_{\pm 1} 
	\;=\;  
	\left[\begin{array}{cc}
		I & 0 & 0 & 0 \\
		0 & I & 0 & 0 \\
		0 & 0 & I & 0 \\
		0 & {\mathrm D} & 0 & 0
	\end{array}\right].
	\end{array}
	\)

== Eigenvalue decomposition

=== Problem

Determine the eigenvalues of the linearized NS equations for plane Poisueille flow with $Re = 2000$ and $k_x = k_z = 1$.

=== Solution

Solution to the generalized eigenvalue problem 
	\(
	\begin{array}{rcl}
	[ \mathcal{F} \, \boldsymbol \phi( \cdot ) ] (y)
	& \!\! = \!\! &
	\lambda \, [ \mathcal{E} \, \boldsymbol \phi( \cdot )] (y),
	\\[0.1cm]
	[\mathcal {L}_{\pm 1} \, \boldsymbol \phi(\cdot)](\pm 1) 
	& \!\! = \!\! &
	0,
	\end{array}
	\)
with the operators ($\mathcal{F},\mathcal{E},\mathcal {L}_{\pm 1}$) given above, determines the eigenpairs $(\lambda,\phi (y))$ for the linearized NS Eqs.~$\eqref{eq:1}$. 
~~~
{Step 1: Problem data and operators in TPBVP}{matlab}
% Set problem data
% number of basis functions, differential order, spatial variable, parameters
N = 127; % number of basis functions, has to be an odd number
m = 2;   % highest differential order 
y = sety(N); % spatially-independent variable

% Set parameters and base velocity
Re = 2000; % Reynolds number
kx = 1; kz = 1; % wall-parallel wavenumbers
k2 = kx*kx + kz*kz;
U = 1 - y.^2; % base flow (Poiseuille; U = y for Couette)
Uy = -2*y;    % derivative of U (Poiseuille; Uy = 1 for Couette)
~~~
~~~
{Step 2: Operators in TPBVP}{matlab}
% Represent zero, identity, and first derivative operators
Z = cell(1,1); Z{1} = 0; % zero operator
I = cell(1,1); I{1} = 1; % identity operator
Dy = cell(2,1); Dy{1} = 1; Dy{2} = 0; % first derivative operator

% Represent diagonal entries of the operator F
F11 = cell(3,1);
F11{1} = 1/Re;
F11{2} = 0;
F11{3} = (-k2/Re) - 1i*kx*U;

% Represent off-diagonal entries of the operator F
F12 = cell(1,1); F12{1} = -Uy;
F14 = cell(1,1); F14{1} = -1i*kx;
F24 = cell(2,1); F24{1} = -1; F24{2} = 0;
F34 = cell(1,1); F34{1} = -1i*kz;
F41 = cell(1,1); F41{1} = 1i*kx;
F42 = cell(2,1); F42{1} = 1; F42{2} = 0;
F43 = cell(1,1); F43{1} = 1i*kz;

% Represent the operator F
F = {F11, F12,   Z, F14;
       Z, F11,   Z, F24;
       Z,   Z, F11, F34;
     F41, F42, F43, Z};

% Represent the operator E
E = {I, Z, Z, Z;
     Z, I, Z, Z;
     Z, Z, I, Z;
     Z, Z, Z, Z};
~~~
~~~
{Step 3: Boundary conditions}{matlab}
% Boundary conditions
bc = BCs(8,4); % eight constraints on four variables

% Boundary conditions at y = \pm 1
% Boundary operator
bc.Operator = {I,  Z, Z, Z;  % u(+1) = 0
	       Z,  I, Z, Z;  % v(+1) = 0
	       Z,  Z, I, Z;  % w(+1) = 0
	       Z, Dy, Z, Z;  % D v(+1) = 0
	       I,  Z, Z, Z;  % u(-1) = 0
	       Z,  I, Z, Z;  % v(-1) = 0
	       Z,  Z, I, Z;  % w(-1) = 0
	       Z, Dy, Z, Z}; % D v(-1) = 0
	           
% Boundary points	           
bc.Points = [ones(4,4);  % first 4 rows for BCs at y = +1
	    -ones(4,4)]; %  next 4 rows for BCs at y = -1

% Differential orders of u, v, w, and p
nd = [2, 2, 2, 2];
~~~
~~~
{Step 4: Compute eigenpairs}{matlab}
% Use sisEig to conduct the eigenvalue decomposition
[V,lambda] = sisEigs(nd,N,F,E,bc,100,'Full');

% Visualize results
plot(real(lambda),imag(lambda),'xk');
~~~
~~~
{}{raw}
<figure>
  <img src="pics/Code3_1.svg" alt="3dflow" style="width:40%">
  <figcaption>Fig. 2 Eigenvalues for Poiseuille flow with \(Re = 2000\) and \(k_x = k_z = 1\).</br><a href="../examples/Code3.m">Code3</a> was used to generate this plot.</figcaption>
</figure>
~~~

== Frequency response analysis 

=== Problem

Compute the first two principal singular values of the frequency response operator associated with the linearized NS equations in Poiseuille flow with $Re = 2000$ and $k_x = k_z = 1$. Determine the $H_\infty$ norm, i.e., the peak value of $\sigma_{\max} (\omega)$ over temporal frequencies.

=== Solution

The temporal Fourier transform can be used to represent the frequency response operator associated with the linearized NS equations as a TPBVP,
\(
\begin{align}
    \left[\mathcal A(\omega)\,\boldsymbol \phi(\cdot)\right] (y) 
    \;&=\; 
    \left[\mathcal B(\omega)\, {\mathbf d} (\cdot)\right](y),\notag
    \\
    \boldsymbol \xi (y)
    \;&=\; 
    \left[\mathcal C(\omega)\, \boldsymbol \phi(\cdot)\right](y),\label{eq:mot1c}
    \\
    [\mathcal{L}_{\pm 1} \, \boldsymbol \phi(\cdot)](\pm 1)  
    \;&=\; 0,
    \notag
  \end{align}  
\)
where $\mathcal{A} (\omega) = {\mathrm i} \omega \mathcal{E} -\mathcal{F}$,
\(
\mathcal A
	\;=\;
  \left[\begin{array}{cccc}
     {\mathrm i} (\omega\, + k_x U(y)) - (1/Re) \Delta  &U'(y) & 0 & \mathrm i k_x\\
    0 & {\mathrm i} (\omega\, + k_x U(y)) - (1/Re) \Delta &  0 & {\mathrm D} \\
    0 & 0 & {\mathrm i} (\omega\, + k_x U(y)) - (1/Re) \Delta & \mathrm i k_z\\
    \mathrm i k_x & {\mathrm  D} & \mathrm i k_z & 0
  \end{array}\right],	
\)

and $\mathcal{A}^{-1} (\omega)$ is the resolvent operator. 

A feedback interconnection of the frequency response operator with its adjoint can be used to compute singular values (see the accompanying paper and [/javascript:cite('Boyd1989') Boyd]),
\(
  \begin{align}
\left[
\begin{array}{cc}
  0 &\mathcal{B}\mathcal{B}^{\dagger} \\
   \mathcal{C}^{\dagger}\mathcal{C}&0
\end{array} \right] \left[ \begin{array}{c}
   \boldsymbol \phi(y)
   \\
   \boldsymbol \psi(y)
\end{array} \right]   
	\;&=\; 
\gamma 
\left[\begin{array}{cc}
  \mathcal{A} & 0\\
  0 & \mathcal{A}^{\dagger}
\end{array}\right]\left[ \begin{array}{c}
   \boldsymbol \phi (y)\\
   \boldsymbol \psi (y)
\end{array} \right], \notag
	\\
	[ \mathcal{L}_{\pm 1} \, \boldsymbol \phi(\cdot) ] (\pm 1)
	\;&=\; 
	0, \label{eq:feedback}
	\\
	[ \mathcal{L}^{\dagger}_{\pm 1} \, \boldsymbol \psi (\cdot) ] (\pm 1)
	\;&=\; 
	0, \notag
\end{align}
\)
where $(\cdot)^{\dagger}$ denotes adjoint of the operator $(\cdot)$ and $\boldsymbol \psi$ is the variable associated with the adjoint operator. The resulting eigenvalues determine the singular values in pairs of opposite signs, i.e., $\gamma = \pm \sigma$.

Function +sisSvdfrs+ computes singular values and function +sisHinf+ computes the $H_\infty$ norm via the algorithm of [/javascript:cite('BRUINSMA1990287') Bruinsma and Steinbuch].

~~~
{SVD of the frequency response operator}{matlab}
% Set problem data
% number of basis functions, differential order, spatial variable, parameters
N = 127; % number of basis functions, has to be an odd number
nd = [2, 2, 2, 2]; % differential orders of u, v, w, and p
y = sety(N); % spatially-independent variable

% Set parameters and base velocity
Re = 2000; % Reynolds number
kx = 1; kz = 1; % wall-parallel wavenumbers
k2 = kx*kx + kz*kz;
U = 1 - y.^2; % base flow (Poiseuille; U = y for Couette)
Uy = -2*y;    % derivative of U (Poiseuille; Uy = 1 for Couette)

% Temporal frequency
omval = linspace(-2,0,20);

% Store first two singular values
sval1 = zeros(length(omval),1);
sval2 = zeros(length(omval),1);

% Start computations
for ind = 1:length(omval),

    % temporal frequency
    om = omval(ind);

    % Represent zero, identity, and first derivative operators
    Z = cell(1,1); Z{1} = 0; % zero operator
    I = cell(1,1); I{1} = 1; % identity operator
    Dy = cell(2,1); Dy{1} = 1; Dy{2} = 0; % first derivative operator

    % Represent diagonal entries of the operator A
    A11 = cell(3,1); A11{1} = -1/Re; A11{2} = 0; A11{3} = 1i*om + k2/Re + 1i*kx*U;

    % Represent off-diagonal entries of the operator A
    A12 = cell(1,1) ; A12{1} = Uy;
    A14 = cell(1,1); A14{1} = 1i*kx;
    A24 = cell(2,1); A24{1} = 1; A24{2} = 0;
    A34 = cell(1,1); A34{1} = 1i*kz;
    A41 = cell(1,1); A41{1} = -1i*kx;
    A42 = cell(2,1); A42{1} = -1; A42{2} = 0;
    A43 = cell(1,1); A43{1} = -1i*kz;

    % Represent the operator A
    A = {A11, A12,   Z, A14;
           Z, A11,   Z, A24;
           Z,   Z, A11, A34;
         A41, A42, A43, Z};
	
    % Represent operators B and C
    B = {I, Z, Z;
         Z, I, Z;
         Z, Z, I;
         Z, Z, Z};

    C = {I, Z, Z, Z;
         Z, I, Z, Z;
         Z, Z, I, Z};
    
    % Boundary conditions
    bc = BCs(8,4); % eight constraints on four variables

    % Boundary conditions at y = \pm 1
    % Boundary operator
    bc.Operator = {I,  Z, Z, Z;  % u(+1) = 0
                   Z,  I, Z, Z;  % v(+1) = 0
                   Z,  Z, I, Z;  % w(+1) = 0
                   Z, Dy, Z, Z;  % D v(+1) = 0
                   I,  Z, Z, Z;  % u(-1) = 0
                   Z,  I, Z, Z;  % v(-1) = 0
                   Z,  Z, I, Z;  % w(-1) = 0
                   Z, Dy, Z, Z}; % D v(-1) = 0

    % Boundary points
    bc.Points = [ones(4,4);  % first 4 rows for BCs at y = +1
                -ones(4,4)]; %  next 4 rows for BCs at y = -1

    % Use function sisSvdfrs to compute singular values
    svals = sisSvdfrs(nd,nd,N,A,B,C,bc,bc,2);

    % Store first two singular values
    sval1(ind) = svals(1);
    sval2(ind) = svals(2);
    
end

% Compute the Hinf norm

% Represent diagonal entries of the operator F
F11 = cell(3,1); F11{1} = 1/Re; F11{2} = 0; F11{3} = (-k2/Re) - 1i*kx*U;

% Represent off-diagonal entries of the operator F
F12 = cell(1,1); F12{1} = -Uy;
F14 = cell(1,1); F14{1} = -1i*kx;
F24 = cell(2,1); F24{1} = -1; F24{2} = 0;
F34 = cell(1,1); F34{1} = -1i*kz;
F41 = cell(1,1); F41{1} = 1i*kx;
F42 = cell(2,1); F42{1} = 1; F42{2} = 0;
F43 = cell(1,1); F43{1} = 1i*kz;

% Represent the operator F
F = {F11, F12,   Z, F14;
       Z, F11,   Z, F24;
       Z,   Z, F11, F34;
     F41, F42, F43, Z};

% Represent the operator E
E = {I, Z, Z, Z;
     Z, I, Z, Z;
     Z, Z, I, Z;
     Z, Z, Z, Z};

[omega_opt,Hinf] = sisHinf(n,N,E,F,B,C,bc,bc);
disp(['Omega_opt: ' num2str(omega_opt)]);
disp(['Hinfinity norm: ' num2str(Hinf)]);

% Visualize results
semilogy(omval, real(sval1),'-ok',omval, real(sval2),'-xk');
ylabel('$\sigma_i$');
xlabel('$\omega$');
hh = legend('$\sigma_0$','$\sigma_1$','location','northwest');
hh.Interpreter = 'latex';
ax = gca;
ax.YTick = [1 10 100];
print('-painters','-dsvg','../docs/pics/Code3_2');
~~~

~~~
{}{raw}
<figure>
  <img src="../docs/pics/Code3_2.svg" alt="3dflow" style="width:40%">
  <figcaption>Fig.3 Singular values as a function of temporal frequency, \(\omega\). </br>This plot is generated using <a href="../examples/Code3.m">Code3</a>, and is validated against</br>Figure 4.10 in <a href="javascript:cite('schmid2012stability')">Stability and transition in shear flows</a></figcaption>
</figure>
~~~





                             
